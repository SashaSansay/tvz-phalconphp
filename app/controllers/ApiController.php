<?php
use Phalcon\Filter;
use Phalcon\Validation;
use Phalcon\Validation\Validator\Email;
use Phalcon\Validation\Validator\PresenceOf;
use Phalcon\Validation\Validator\Numericality;

class ApiController extends ControllerBase
{

    private $validation;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->validation = new Validation();

        $this->validation->add(
            'id',
            new PresenceOf(
                [
                    'message' => 'The id is required',
                ]
            )
        );

        $this->validation->add(
            'id',
            new Numericality(
                [
                    'message' => ':field is not valid',
                ]
            )
        );

        $this->view->disable();

    }

    private function redirect404(){

        $this->dispatcher->forward(
            [
                "controller" => "index",
                "action"     => "show404"
            ]
        );

        return true;
    }

    private function sendResponse($array){
        $responseAr = [
            'result' => []
        ];

        $response = new \Phalcon\Http\Response();
        if(is_null($array['success']) && $array['success'] !== false){
            $responseAr['result']['success'] = true;
            $array['result']['errors'] = [];
        }

        $responseAr['items'] = $array;

        $response->setJsonContent($responseAr);
        return $response;
    }

    private function checkForError($errors){
        if(count($errors)>0){
            $errorsAr = [];
            $errorsAr['success'] = false;
            $errorsAr['errors'] = [];

            foreach ($errors as $message) {
                $errorsAr['errors'][] =
                    [
                        'message' => $message->getMessage(),
                        'field' => $message->getField(),
                    ];
            }

            return $this->sendResponse($errorsAr);
        }else{
            return true;
        }
    }

    public function indexAction($type){
    }


    public function categoryAction($type){
        $cats = Category::find();

        $categories = [];

        foreach ($cats as $cat){
            $categories[] = [
                'id' => $cat->id,
                'title' => $cat->title
            ];
        }

        return $this->sendResponse($categories);
    }

    public function serialAction($id=""){
        if($id==""){
            $res = Serial::find();
            $serialAr = [];
            foreach ($res as $serials){
                $serialAr[] = [
                    'id' => $serials->id,
                    'title' => $serials->title,
                    'image' => $serials->image,
                    'description' => $serials->description,
                    'rating' => $serials->stars,
                    'label' => $serials->label
                ];
            }
            return $this->sendResponse($serialAr);
        }else{
            $valid = $this->checkForError($this->validation->validate(['id'=>$id]));
            if($valid === true){
                $serials = Serial::findFirst($id);
                if($serials){
                    $serialAr = [
                        'id' => $serials->id,
                        'title' => $serials->title,
                        'image' => $serials->image,
                        'description' => $serials->description,
                        'rating' => $serials->stars,
                        'label' => $serials->label
                    ];

                    return $this->sendResponse($serialAr);
                }else{
                    $response = [
                        'success' => false,
                        'errors' =>
                            [
                                [
                                    'message' => 'serial not found',
                                    'field' => 'id'
                                ]
                            ]
                    ];

                    return $this->sendResponse($response);
                }
            }else{
                return $valid;
            }
        }
    }
}